name: Continuous Deployment

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: cicd-project-412702
  GAR_LOCATION: asia-southeast1-docker.pkg.dev/cicd-project-412702/demo
  GCE_INSTANCE_NAME: instance1   # Replace with your actual instance name
  GCE_INSTANCE_ZONE: asia-southeast1-a   # Replace with your actual instance zone
  IMAGE_TAG: latest

jobs:
  check-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Use gcloud CLI
        run: gcloud info

      - name: Install Docker on GCE instance
        run: |
          gcloud compute ssh ${{ env.GCE_INSTANCE_NAME }} \
            --zone=${{ env.GCE_INSTANCE_ZONE }} \
            --command="sudo apt-get update && sudo apt-get install -y docker.io"

      - name: Check Docker images on GCE instance
        id: check-images
        run: |
          gcloud compute ssh ${{ env.GCE_INSTANCE_NAME }} \
            --zone=${{ env.GCE_INSTANCE_ZONE }} \
            --command="docker images | grep ${GAR_LOCATION}" || true
          echo "::set-output name=has_images::$(docker images | grep ${GAR_LOCATION} | wc -l)"

      - name: Build and push MySQL image
        if: steps.check-images.outputs.has_images == 0
        run: |
          docker build ./db/ --file ./db/Dockerfile --tag ${{ env.GAR_LOCATION }}/mysql:${{ env.IMAGE_TAG }}
          docker push ${{ env.GAR_LOCATION }}/mysql:${{ env.IMAGE_TAG }}

      - name: Build and push Python image
        if: steps.check-images.outputs.has_images == 0
        run: |
          docker build ./script/ --file ./script/Dockerfile --tag ${{ env.GAR_LOCATION }}/python-script:${{ env.IMAGE_TAG }}
          docker push ${{ env.GAR_LOCATION }}/python-script:${{ env.IMAGE_TAG }}

      - name: Replace and restart containers on GCE instance
        run: |
          gcloud compute ssh ${{ env.GCE_INSTANCE_NAME }} \
            --zone=${{ env.GCE_INSTANCE_ZONE }} \
            --command="docker pull ${env.GAR_LOCATION}/mysql:${env.IMAGE_TAG} && \
                        docker stop mysql-container && \
                        docker rm mysql-container && \
                        docker run -d --network=my_network -p 3306:3306 --name=mysql-container ${env.GAR_LOCATION}/mysql:${env.IMAGE_TAG} && \
                        docker pull ${GAR_LOCATION}/python-script:${env.IMAGE_TAG} && \
                        docker stop python-script-container && \
                        docker rm python-script-container && \
                        docker run -d --network=my_network --name=python-script-container ${env.GAR_LOCATION}/python-script:${env.IMAGE_TAG}"
