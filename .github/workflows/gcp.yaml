name: Build, Push, and Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: cicd-project-412702
  REGION: asia-southeast1
  GAR_LOCATION: asia-southeast1-docker.pkg.dev/cicd-project-412702/demo
  SERVICE_NAME: my-cloud-run-service
  IMAGE_TAG: latest
  GCE_REGION: asia-southeast1-a

jobs:
  build-mysql:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Use gcloud CLI
        run: gcloud info

      - name: Docker auth
        run: gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev" --quiet

      - name: Build MySQL image
        run: docker build ./db/ --file ./db/Dockerfile --tag "${{ env.GAR_LOCATION }}/mysql:${{ env.IMAGE_TAG }}"
        working-directory: .

      - name: Push MySQL image to Artifact Registry
        run: docker push "${{ env.GAR_LOCATION }}/mysql:${{ env.IMAGE_TAG }}"

  build-and-push-python:
    runs-on: ubuntu-latest
    needs: build-mysql
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Use gcloud CLI
        run: gcloud info

      - name: Docker auth
        run: gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev" --quiet

      - name: Build and push Python image
        run: |
          docker build ./script/ --file ./script/Dockerfile --tag "${{ env.GAR_LOCATION }}/python-script:${{ env.IMAGE_TAG }}"
          docker push "${{ env.GAR_LOCATION }}/python-script:${{ env.IMAGE_TAG }}"
        working-directory: .

  deploy-to-compute-engine:
    runs-on: ubuntu-latest
    needs: build-and-push-python
    steps:
      - name: Deploy to Compute Engine
        run: |
          # Add the Google Cloud SDK repository
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates gnupg
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

          # Install Google Cloud SDK
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk

          # Authenticate with gcloud using your service account key
          echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 --decode > /tmp/key.json
          gcloud auth activate-service-account --key-file=/tmp/key.json

          # Set project and region
          gcloud config set project "${{ env.PROJECT_ID }}"
          gcloud config set compute/region "${{ env.GCE_REGION }}"

          # Pull the latest MySQL Docker image from Artifact Registry
          docker pull "${{ env.GAR_LOCATION }}/mysql:${{ env.IMAGE_TAG }}"

          # Pull the latest Python Docker image from Artifact Registry
          docker pull "${{ env.GAR_LOCATION }}/python-script:${{ env.IMAGE_TAG }}"

          # Stop and remove the existing MySQL container (if running)
          docker stop my-mysql-container || true
          docker rm my-mysql-container || true

          # Run the new MySQL Docker container
          docker run -d --name my-mysql-container "${{ env.GAR_LOCATION }}/mysql:${{ env.IMAGE_TAG }}"

          # Stop and remove the existing Python container (if running)
          docker stop my-python-container || true
          docker rm my-python-container || true

          # Run the new Python Docker container
          docker run -d --name my-python-container -p 80:80 "${{ env.GAR_LOCATION }}/python-script:${{ env.IMAGE_TAG }}"

          # Copy the docker-compose.yml file to the Compute Engine instance
          gcloud compute scp ./docker-compose.yml instance1:/path/on/instance/docker-compose.yml

          # SSH into the instance and run docker-compose
          gcloud compute ssh instance1
